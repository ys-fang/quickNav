<!DOCTYPE html>
<html lang="zh-TW">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>英文單字/例句 - 語音匯出</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <!-- CSS Styles -->
  <style>
    /* ===== CSS 變數 (僅保留淺色模式) ===== */
    :root {
      --primary-color: #6366f1;      /* 主色調：現代感的靛藍色 */
      --primary-dark: #4f46e5;
      --primary-light: #c7d2fe;
      --secondary-color: #ec4899;    /* 次要色：活力粉紅 */
      --secondary-dark: #db2777;
      --accent-color: #10b981;       /* 強調色：清新綠 */
      --accent-dark: #059669;
      --video-color: #ff0000;
      --video-dark: #cc0000;
      --warning-color: #ff9800;
      --warning-dark: #fb8c00;
      --highlight-color: #fff59d;
      --text-primary: #1e293b;
      --text-secondary: #64748b;
      --text-light: #fff;
      --bg-primary: linear-gradient(135deg, #f8fafc, #f1f5f9);
      --bg-card: #ffffff;
      --bg-toggle: #f8f9fa;
      --border-color: #e0e0e0;
      --shadow-sm: 0 2px 4px rgba(0,0,0,0.1);
      --shadow-md: 0 2px 6px rgba(0,0,0,0.1);
      --shadow-lg: 0 4px 12px rgba(0,0,0,0.3);
      --disabled-bg: #e9ecef;
      --disabled-text: #6c757d;
      --toggle-hover-bg: #e9ecef;
      --toggle-hover-color: #495057;
      --toggle-border: #dee2e6;
      --header-bg: rgba(255, 255, 255, 0.9);

      /* 尺寸變數 */
      --spacing-xs: 4px;
      --spacing-sm: 8px;
      --spacing-md: 12px;
      --spacing-lg: 16px;
      --spacing-xl: 20px;
      --border-radius-sm: 4px;
      --border-radius-md: 6px;
      --border-radius-lg: 8px;
      --border-radius-xl: 20px;
      --font-size-sm: 0.9em;
      --font-size-md: 1em;
      --font-size-lg: 1.1em;
      --font-size-xl: 1.4em;
      --btn-height-sm: 36px;
      --btn-height-md: 48px;
    }

    /* ===== 基礎樣式 ===== */
    body {
      font-family: 'Roboto', sans-serif;
      margin: 0;
      padding: 0;
      color: var(--text-primary);
    }

    #app-container {
      top: 0;
      left: 0;
      right: 0;
      position: fixed;
      height: 100vh;
      display: flex;
      flex-direction: column;
      overflow: auto;
      background: var(--bg-primary);
    }

    h1 {
      text-align: center;
      font-size: var(--font-size-md);
      color: var(--primary-color);
      margin: 0px 0 20px;
      position: fixed;
      top: 0;
      left: 50%;
      transform: translateX(-50%);
      width: 100%;
      background: var(--header-bg);
      z-index: 900;
      padding: var(--spacing-sm) 0;
    }

    /* ===== 按鈕樣式 ===== */
    button {
      padding: var(--spacing-sm) var(--spacing-md);
      border: none;
      border-radius: var(--border-radius-sm);
      cursor: pointer;
      transition: background 0.3s, transform 0.2s;
      font-size: var(--font-size-sm);
      width: auto; /* 移除 width: 100% */
    }

    #download-all-btn {
      display: none; /* 初始隱藏，登入後顯示 */
      background: var(--primary-color);
      color: var(--text-light);
      margin: 10px auto; /* 調整 margin */
      width: fit-content; /* 讓寬度自適應內容 */
    }

    #download-all-btn:hover {
      background: var(--primary-dark);
    }

    /* 通用按鈕樣式 */
    .btn-common,
    a.btn-common {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: var(--spacing-sm);
      padding: var(--spacing-sm) var(--spacing-lg);
      border-radius: var(--border-radius-sm);
      font-size: var(--font-size-sm);
      text-decoration: none !important;
      transition: all 0.2s ease;
      border: none;
      cursor: pointer;
      height: var(--btn-height-sm);
      min-width: 100px;
      color: var(--text-light) !important;
      font-weight: 600;
      letter-spacing: 0.025em;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .btn-common i,
    a.btn-common i {
      font-size: var(--font-size-lg);
    }

    .btn-common:not([disabled]):hover,
    a.btn-common:not([disabled]):hover {
      transform: translateY(-1px);
      text-decoration: none !important;
      color: var(--text-light) !important;
    }

    .btn-common[disabled],
    a.btn-common[disabled] {
      background: var(--disabled-bg) !important;
      color: var(--disabled-text) !important;
      cursor: not-allowed;
    }

    /* 發音按鈕 */
    .pronounce-btn,
    button.pronounce-btn,
    a.pronounce-btn {
      background: var(--accent-color);
      color: white;
    }

    .pronounce-btn:not([disabled]):hover,
    button.pronounce-btn:not([disabled]):hover,
    a.pronounce-btn:not([disabled]):hover {
      background: var(--accent-dark);
    }

    /* 混合發音按鈕 */
    .combined-btn,
    button.combined-btn,
    a.combined-btn {
      background: var(--secondary-color);
      color: white;
    }

    .combined-btn:not([disabled]):hover,
    button.combined-btn:not([disabled]):hover,
    a.combined-btn:not([disabled]):hover {
      background: var(--secondary-dark);
    }

    /* 影片按鈕 */
    .video-btn,
    button.video-btn,
    a.video-btn {
      background: var(--video-color) !important;
    }

    .video-btn:not([disabled]):hover,
    button.video-btn:not([disabled]):hover,
    a.video-btn:not([disabled]):hover {
      background: var(--video-dark) !important;
    }

    /* ===== 表格樣式 ===== */
    .container {
      margin: var(--spacing-xl) 0;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      background: var(--bg-card);
      box-shadow: var(--shadow-md);
      border-radius: var(--border-radius-lg);
    }

    #table-container {
      overflow-x: auto;
      width: 100%;
      margin-bottom: 7em;
      margin-top: 7em; /* 調整以容納 Label 輸入區 */
      padding: var(--spacing-xl);
    }

    th, td {
      padding: var(--spacing-sm);
      border: 1px solid var(--border-color);
      text-align: center;
      white-space: nowrap;
      word-break: keep-all;
      overflow-x: auto;
    }

    th {
      background: var(--primary-light);
      font-weight: 600;
    }

    .col-download, .col-combined-download {
      display: none;
    }

    /* ===== 功能區域樣式 ===== */
    /* Label 輸入區域 */
    #label-container {
      position: fixed;
      top: 60px; /* 調整位置，避免與標題重疊 */
      left: 50%;
      transform: translateX(-50%);
      background: var(--bg-card);
      border: 1px solid var(--border-color);
      padding: var(--spacing-md);
      border-radius: var(--border-radius-md);
      box-shadow: var(--shadow-sm);
      display: flex;
      flex-direction: column;
      gap: var(--spacing-sm);
      margin: 0 auto;
      max-width: 90%;
      width: 320px;
      z-index: 950; /* 低於標題，高於內容 */
      display: none; /* 初始隱藏，登入後顯示 */
    }

    #label-input {
      flex: 1;
      padding: 6px;
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius-sm);
      font-size: var(--font-size-sm);
    }

    #load-data-btn {
      background: var(--primary-color);
      color: var(--text-light);
    }

    #load-data-btn:hover {
      background: var(--primary-dark);
    }

    /* 語音控制區 */
    #voice-toggle-container {
      position: fixed;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
      border: 1px solid var(--border-color); /* 使用邊框色 */
      padding: var(--spacing-sm);
      border-radius: var(--border-radius-md);
      box-shadow: var(--shadow-sm);
      z-index: 10;
      text-align: center;
      max-width: 90%;
      width: 320px;
      display: none; /* 初始隱藏，登入後顯示 */
    }

    #voice-toggle-container label {
      font-size: var(--font-size-sm);
      color: var(--text-secondary);
    }

    #speed-control {
      display: flex;
      justify-content: center;
      gap: 5px;
      margin-top: 5px;
    }

    /* ===== 狀態指示器 ===== */
    #loadingPlacholder, #userIsNotLogin, #audio-loading, #initial-prompt {
      text-align: center;
      margin: var(--spacing-xl) 0;
      font-size: var(--font-size-lg);
      color: var(--text-secondary);
    }

    #userIsNotLogin a {
      color: var(--primary-color);
      text-decoration: underline;
    }

    #userIsNotLogin, #userIsLogin {
      display: none;
    }

    #initial-prompt {
        margin-top: 10em; /* 調整與 Label 輸入框的距離 */
    }

    #audio-loading {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0,0,0,0.8);
      color: var(--text-light);
      padding: 10px 20px;
      border-radius: var(--border-radius-md);
      display: none;
      z-index: 20;
    }

    .highlight {
      background: var(--highlight-color);
      transition: background 0.5s;
    }

    /* ===== 響應式設計 ===== */
    @media (max-width: 767px) {
      /* 移動裝置顯示表格 */
      #table-container { display: block; }
      
      /* 按鈕尺寸調整 */
      button {
        padding: var(--spacing-md);
        font-size: var(--font-size-md);
      }
      
      /* 功能區域調整 */
      #label-container {
        padding: var(--spacing-md);
        max-width: 85%;
        top: 50px; /* 手機模式下微調位置 */
      }
      
      #voice-toggle-container {
        max-width: 85%;
        padding: var(--spacing-md);
        flex-direction: column;
        align-items: center;
        bottom: 45px;
      }
      
      /* 文字換行處理 */
      th, td {
        white-space: normal;
        word-break: keep-all;
        overflow-x: hidden;
      }
    }

    @media (min-width: 768px) {
      /* 桌面顯示表格 */
      #table-container { display: block; }
    }

    /* 按鈕點擊效果 */
    .btn-common:active {
      transform: scale(0.98);
    }

    #userIsNotLogin {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 1000;
    }
  </style>
  <!-- External Libraries -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lamejs/1.2.0/lame.min.js"></script>
</head>
<body>
  <div id="app-container">
    <h1><i class="fas fa-language"></i> 英文單字/例句 - 語音匯出</h1>

    <!-- Label Input Container -->
    <div id="label-container">
      <input type="text" id="label-input" placeholder="輸入 Label..." aria-label="輸入 Label">
      <button id="load-data-btn" class="btn-common"><i class="fas fa-filter"></i> 載入</button>
      <button id="download-all-btn"><i class="fas fa-download"></i> 下載全部混合音檔</button>
    </div>

    <div id="loadingPlacholder" style="display: none;"><i class="fas fa-spinner fa-pulse"></i> 載入中...</div>
    <!-- Audio loading indicator -->
    <div id="audio-loading"><i class="fas fa-cog fa-spin"></i> 語音合成中...</div>
    <div id="userIsNotLogin">
      請先<a id="loginLink" href="#"><i class="fas fa-sign-in-alt"></i> 註冊/登入均一帳號</a>，來使用 AI 語音合成功能。
    </div>
    <div id="userIsLogin">
      <div id="initial-prompt">請在上方輸入 Label 並點擊「載入」以篩選資料。</div>
      <div id="table-container" class="container" style="display: none;"></div>
      <audio id="audio_output" controls style="display: none;"></audio>
    </div>

    <!-- Voice Selection Container -->
    <div id="voice-toggle-container">
      <div>
        <label><i class="fas fa-microphone-alt"></i> 語音: </label>
        <input type="radio" name="voice" value="male" id="voiceMale" checked><label for="voiceMale">男聲</label>
        <input type="radio" name="voice" value="female" id="voiceFemale"><label for="voiceFemale">女聲</label>
      </div>
      <div id="speed-control">
        <label><i class="fas fa-tachometer-alt"></i> 語速:</label>
        <input type="range" id="speed-slider" min="0.5" max="2" step="0.1" value="1">
        <span id="speed-value">1.0</span>x
      </div>
    </div>
    <!-- Theme Toggle Button Removed -->
  </div> <!-- app-container 結束 -->
  <script>
    // ======= Core Application Script =======

    // Constants and initial setup
    const MALE_VOICE = "en-US-ChristopherNeural", FEMALE_VOICE = "en-US-NancyNeural";
    const SILENCE_DURATION_1 = 1.0, SILENCE_DURATION_1_5 = 1.5, MP3_BITRATE = 128;
    const audio = document.getElementById("audio_output");

    // Global variables
    let selectedVoice = MALE_VOICE; // default
    let finalData = [];
    let ttsCache = {};

    // Generate login link based on current URL
    const currentUrl = encodeURIComponent(window.location.href);
    const loginLink = document.getElementById("loginLink");
    loginLink.href = `https://www.junyiacademy.org/login?continue=${currentUrl}`;

    // ======= Audio Utility Functions =======

    // Convert Float32 to Int16
    const convertFloat32ToInt16 = buffer => {
      const out = new Int16Array(buffer.length);
      for (let i = 0; i < buffer.length; i++) {
        let s = Math.max(-1, Math.min(1, buffer[i]));
        s = s < 0 ? s * 0x8000 : s * 0x7FFF;
        out[i] = s;
      }
      return out;
    };

    // Convert AudioBuffer to MP3 Blob
    const audioBufferToMp3 = buffer => {
      const encoder = new lamejs.Mp3Encoder(buffer.numberOfChannels, buffer.sampleRate, MP3_BITRATE);
      const data = [];
      const blockSize = 1152;
      const channelData = [
        buffer.getChannelData(0),
        buffer.numberOfChannels === 2 ? buffer.getChannelData(1) : null
      ];

      let mp3buf;
      for (let i = 0; i < channelData[0].length; i += blockSize) {
        const leftChunk = convertFloat32ToInt16(channelData[0].subarray(i, i + blockSize));
        if (channelData[1]) {
          const rightChunk = convertFloat32ToInt16(channelData[1].subarray(i, i + blockSize));
          mp3buf = encoder.encodeBuffer(leftChunk, rightChunk);
        } else {
          mp3buf = encoder.encodeBuffer(leftChunk);
        }
        if (mp3buf.length) data.push(new Int8Array(mp3buf));
      }
      mp3buf = encoder.flush();
      if (mp3buf.length) data.push(new Int8Array(mp3buf));
      return new Blob(data, { type: 'audio/mp3' });
    };

    // Loading indicators
    const showLoading = () => document.getElementById("audio-loading").style.display = "block";
    const hideLoading = () => document.getElementById("audio-loading").style.display = "none";
    const showDataLoading = () => document.getElementById("loadingPlacholder").style.display = "block";
    const hideDataLoading = () => document.getElementById("loadingPlacholder").style.display = "none";

    // ======= TTS Functions =======

    // Generate TTS text from row data
    function getTtsText(rowData) {
      // 只發音單字，不包含例句
      return rowData[0] || "";
    }

    // Generate single audio segment
    async function generateAudio(text, play = true, selectedVoice) {
      showLoading();
      const key = `${text}_${selectedVoice}`;
      if (ttsCache[key]) {
        audio.src = ttsCache[key];
        hideLoading();
        if (play) {
          audio.playbackRate = document.getElementById("speed-slider").value;
          audio.play();
        }
        return ttsCache[key];
      }
      if (!audio.paused) {
        audio.pause();
        audio.currentTime = 0;
      }
      // 取得 xsrfToken
      let xsrfToken = /fkey=([^;]*)/.exec(document.cookie)?.[1] || null;

      try {
        const res = await fetch("/api/v2/jutor/tts", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-KA-FKey": xsrfToken
          },
          body: JSON.stringify({
            text,
            "lang": selectedVoice.slice(0, 5),
            voice_name: selectedVoice,
            format: "mp3"
          })
        });
        const { data } = await res.json();
        if (data?.audio_data) {
          const src = `data:audio/mp3;base64,${data.audio_data}`;
          ttsCache[key] = src;
          audio.src = src;
          audio.playbackRate = document.getElementById("speed-slider").value;
          hideLoading();
          if (play) audio.play();
          return src;
        }
      } catch (e) {
        console.error("TTS Error:", e);
      }
      hideLoading();
      return null;
    }

    // Generate audio segment for combining
    async function generateAudioSegment(text, voice) {
      const key = `${text}_${voice}`;
      if (ttsCache[key]) return ttsCache[key];

      let xsrfToken = /fkey=([^;]*)/.exec(document.cookie)?.[1] || null;
      try {
        const res = await fetch("/api/v2/jutor/tts", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-KA-FKey": xsrfToken
          },
          body: JSON.stringify({
            text,
            lang: voice.slice(0, 5),
            voice_name: voice,
            format: "mp3"
          })
        });
        const { data } = await res.json();
        if (data?.audio_data) {
          const src = `data:audio/mp3;base64,${data.audio_data}`;
          ttsCache[key] = src;
          return src;
        }
      } catch (e) {
        console.error("Segment Error:", e);
      }
      return null;
    }

    // Generate combined audio: male voice + female voice + sentence male voice + female voice with silence in between
    async function generateCombinedAudio(row, selectedVoice) {
      showLoading();
      // row = [英文, KK音標, 中譯, 例句, 翻譯, 影片ID]
      const [vocab, , , sentence] = row.map(v => v?.trim() || "");
      const [mVocab, fVocab, mSentence, fSentence] = await Promise.all([
        generateAudioSegment(vocab, MALE_VOICE),
        generateAudioSegment(vocab, FEMALE_VOICE),
        generateAudioSegment(sentence, MALE_VOICE),
        generateAudioSegment(sentence, FEMALE_VOICE)
      ]);
      if (!mVocab || !fVocab || !mSentence || !fSentence) {
        console.error("Segment failed");
        hideLoading();
        return null;
      }
      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
      const buffers = await Promise.all([
        mVocab, fVocab, mSentence, fSentence
      ].map(b => {
        const byteString = atob(b.split(',')[1]);
        const ab = new ArrayBuffer(byteString.length);
        const ia = new Uint8Array(ab);
        for (let i = 0; i < byteString.length; i++) {
          ia[i] = byteString.charCodeAt(i);
        }
        return audioCtx.decodeAudioData(ab);
      }));

      const silences = [
        SILENCE_DURATION_1, SILENCE_DURATION_1_5,
        SILENCE_DURATION_1, SILENCE_DURATION_1_5
      ].map(d => audioCtx.createBuffer(2, d * buffers[0].sampleRate, buffers[0].sampleRate));

      const totalLength = buffers.reduce((sum, b) => sum + b.length, 0) +
                          silences.reduce((sum, s) => sum + s.length, 0);
      const output = audioCtx.createBuffer(2, totalLength, buffers[0].sampleRate);
      let offset = 0;
      [buffers[0], silences[0], buffers[1], silences[1],
       buffers[2], silences[2], buffers[3], silences[3] // 確保有第四個靜音段
      ].forEach(b => {
        if (!b) return; // 如果緩衝區不存在（例如靜音段），則跳過
        for (let ch = 0; ch < 2; ch++) {
          // 若 b 只有 1 channel，第二聲道複製第一聲道
          output.getChannelData(ch).set(b.getChannelData(Math.min(ch, b.numberOfChannels - 1)), offset);
        }
        offset += b.length;
      });

      const url = URL.createObjectURL(audioBufferToMp3(output));
      hideLoading();
      return url;
    }

    // Download all combined audio files
    async function downloadAllCombinedAudios(batchSize = 50) {
      // finalData[0] 是表頭，故從 i=1 開始
      let count = 0;
      const downloadBtn = document.getElementById("download-all-btn");
      const originalText = downloadBtn.innerHTML;
      downloadBtn.disabled = true;
      downloadBtn.innerHTML = `<i class="fas fa-spinner fa-pulse"></i> 處理中... (0/${finalData.length - 1})`;

      const totalFiles = finalData.length - 1; // 總音檔數量
      const digits = totalFiles.toString().length; // 計算位數

      for (let i = 1; i < finalData.length; i++) {
        // 如果該列空白就跳過
        if (!finalData[i].some(c => c && c.trim())) continue;
        downloadBtn.innerHTML = `<i class="fas fa-spinner fa-pulse"></i> 處理中... (${count}/${totalFiles})`;
        const url = await generateCombinedAudio(finalData[i]);
        if (url) {
          const a = document.createElement("a");
          const fileNumber = (count + 1).toString().padStart(digits, '0'); // 生成編號，根據總數量調整位數
          a.href = url;
          a.download = `#${fileNumber}_${finalData[i][0]}.mp3`; // 更新檔案名稱
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url); // 釋放記憶體
          count++;
          // 每次下載 batchSize 筆，就詢問使用者是否繼續
          if (count % batchSize === 0 && i < finalData.length - 1) {
            if (!confirm(`已下載 ${count} 筆，是否繼續下載？`)) break;
          }
        } else {
          console.error(`下載失敗於索引 ${i}: ${finalData[i][0]}`);
          alert(`下載 ${finalData[i][0]} 的混合音檔失敗，請檢查控制台錯誤訊息。`);
          // 可選擇是否中斷
          // break;
        }
      }
      downloadBtn.disabled = false;
      downloadBtn.innerHTML = originalText;
      alert(`已完成下載 ${count} 個混合音檔。`);
    }


    // ======= UI Rendering Functions =======

    // Render table view
    function renderTable(data) {
      const container = document.getElementById('table-container');
      container.innerHTML = "";
      if (!data || data.length <= 1) {
        container.innerHTML = "<p>沒有符合條件的資料。</p>";
        container.style.display = "block"; // 確保容器可見以顯示訊息
        return;
      }
      const table = document.createElement('table');

      // 定義新的表頭順序
      const newHeader = [
        "英文",
        "KK音標",
        "中譯",
        "單字發音",
        "例句",
        "翻譯",
        "混合發音",
        "講解影片"
      ];

      // 組合表頭 HTML
      const headerRow = `<tr>
        ${newHeader.map(h => `<th>${h}</th>`).join('')}
      </tr>`;

      // 組合資料列
      const bodyRows = data.slice(1).filter(r => r.some(c => c && c.trim())).map((row, index) => {
        // 確保 row[5] (影片ID) 存在且非空
        const videoId = row[5] ? row[5].trim() : null;
        return `
          <tr data-index="${index + 1}">
            <td>${row[0] || ''}</td>
            <td>${row[1] || ''}</td>
            <td>${row[2] || ''}</td>
            <td><button class="pronounce-btn btn-common"><i class="fas fa-volume-up"></i> 單字發音</button></td>
            <td>${row[3] || ''}</td>
            <td>${row[4] || ''}</td>
            <td><button class="combined-btn btn-common"><i class="fas fa-exchange-alt"></i> 混合發音</button></td>
            <td>
              ${videoId ?
                `<button class="video-btn btn-common" onclick="window.open('https://www.youtube.com/watch?v=${videoId}', '_blank')">
                  <i class="fab fa-youtube"></i> 講解影片
                </button>` :
                `<button class="video-btn btn-common" disabled>N/A</button>`
              }
            </td>
          </tr>
        `;
      }).join('');

      table.innerHTML = headerRow + bodyRows;
      container.appendChild(table);
      container.style.display = "block"; // 顯示表格容器

      // 綁定事件：對發音、混合發音按鈕
      table.querySelectorAll('.pronounce-btn').forEach(btn => {
        const rowIndex = parseInt(btn.closest('tr').dataset.index);
        btn.addEventListener('click', () => {
          const rowData = data[rowIndex];
          const textToSpeak = getTtsText(rowData);
          generateAudio(textToSpeak, true, selectedVoice);
        });
      });

      table.querySelectorAll('.combined-btn').forEach(btn => {
        const rowIndex = parseInt(btn.closest('tr').dataset.index);
        btn.addEventListener('click', async () => {
          const rowData = data[rowIndex];
          const url = await generateCombinedAudio(rowData, selectedVoice);
          if (url) {
            audio.src = url;
            audio.playbackRate = document.getElementById("speed-slider").value;
            audio.play();
          }
        });
      });
    }

    // ======= Data Functions =======

    // Load data from Google Sheets
    async function loadSheetData(label, spreadsheetUrl) {
      showDataLoading();
      document.getElementById("initial-prompt").style.display = "none"; // 隱藏初始提示
      document.getElementById("table-container").style.display = "none"; // 隱藏舊資料
      document.getElementById("download-all-btn").style.display = "none"; // 隱藏下載按鈕

      try {
        const response = await fetch(spreadsheetUrl);
        if (!response.ok) throw new Error("無法載入試算表資料");
        const csvText = await response.text();
        if (!csvText.trim()) throw new Error("試算表內容為空");

        // 解析 CSV
        const { data } = Papa.parse(csvText, { header: false });
        if (!data || data.length === 0) throw new Error("解析後的資料為空");

        // 取表頭
        const header = data.shift();
        if (!header || header.length < 1) throw new Error("無法提取表頭，資料格式可能有誤");

        // 過濾資料：只保留第一欄 (Label) 符合的
        const filteredData = data.filter(row => row.length > 0 && row[0] && row[0].toLowerCase() === label.toLowerCase());
        // 去除每行的第一欄 (Label)
        const processedHeader = header.slice(1);
        const processedData = filteredData.map(row => row.slice(1));

        // 組合成最終資料
        finalData = [processedHeader, ...processedData];

        // 渲染
        renderTable(finalData);

        // 如果有資料，顯示下載按鈕
        if (finalData.length > 1) {
            document.getElementById("download-all-btn").style.display = "inline-flex";
        } else {
            // 如果沒有資料，確保按鈕隱藏
            document.getElementById("download-all-btn").style.display = "none";
        }

        hideDataLoading();
      } catch (error) {
        console.error("載入資料失敗:", error);
        hideDataLoading();
        document.getElementById("initial-prompt").textContent = `載入資料失敗：${error.message}`;
        document.getElementById("initial-prompt").style.display = "block";
        document.getElementById("download-all-btn").style.display = "none"; // 確保失敗時隱藏按鈕
      }
    }

    // ======= Main Application Entry Point =======
    document.addEventListener("DOMContentLoaded", async () => {

      // Get XSRF Token
      let xsrfToken = null;
      try {
        await jQuery.ajax({
          url: 'https://www.junyiacademy.org/',
          method: 'GET',
          async: true, // 改為異步
          cache: false
        });
        xsrfToken = /fkey=([^;]*)/.exec(document.cookie)?.[1] || null;
      } catch (error) {
        console.error("無法獲取 XSRF token:", error);
        // 可以在這裡處理錯誤，例如顯示提示
      }


      // Check login status
      let isLogin = false;
      try {
        const response = await jQuery.ajax({
          url: 'https://www.junyiacademy.org/api/v2/user/tracking-identity',
          method: 'GET',
          async: true, // 改為異步
          cache: false,
          xhrFields: { withCredentials: true },
          headers: { 'X-KA-FKey': xsrfToken }
        });
        isLogin = response.data.isLoggedIn;
      } catch (error) {
        console.error("無法檢查登入狀態:", error);
        // 可以在這裡處理錯誤，例如顯示提示
      }


      document.getElementById("userIsLogin").style.display = isLogin ? "block" : "none";
      document.getElementById("userIsNotLogin").style.display = isLogin ? "none" : "block";
      document.getElementById("label-container").style.display = isLogin ? "flex" : "none";
      document.getElementById("voice-toggle-container").style.display = isLogin ? "block" : "none";
      // 下載按鈕的顯示由 loadSheetData 控制

      if (!isLogin) return; // 如果未登入，停止後續操作

      // Voice selection handler
      document.querySelectorAll('input[name="voice"]').forEach(elem => {
        elem.addEventListener("change", e => {
          selectedVoice = e.target.value === "male" ? MALE_VOICE : FEMALE_VOICE;
          console.log("Current voice selected:", selectedVoice);
          // 清除快取，因為語音變了
          ttsCache = {};
        });
      });

      // Speech rate adjustment
      const speedSlider = document.getElementById("speed-slider");
      const speedValue = document.getElementById("speed-value");
      speedSlider.addEventListener("input", () => {
        const rate = parseFloat(speedSlider.value);
        audio.playbackRate = rate;
        speedValue.textContent = rate.toFixed(1);
      });

      // Google Sheet Info
      const spreadsheetId = "1wSHAL3piJGEJ8EnoyK_W9kkvL42GQYId35UEhMzHTZY";
      const gid = "0";
      const spreadsheetUrl = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/export?format=csv&gid=${gid}`;

      // Bind Load Data button event
      const loadDataBtn = document.getElementById("load-data-btn");
      const labelInput = document.getElementById("label-input");

      const triggerLoadData = async () => {
          const label = labelInput.value.trim();
          if (!label) {
              alert("請輸入 Label！");
              labelInput.focus();
              return;
          }
          // 清除舊的 TTS 快取
          ttsCache = {};
          await loadSheetData(label, spreadsheetUrl);
      };

      loadDataBtn.addEventListener("click", triggerLoadData);
      // Enter 也能觸發載入
      labelInput.addEventListener("keypress", e => {
        if (e.key === "Enter") {
            e.preventDefault(); // 防止表單提交（如果有的話）
            triggerLoadData();
        }
      });

      // Download all combined audio
      document.getElementById("download-all-btn").addEventListener("click", () => downloadAllCombinedAudios());

      // End of event bindings
    });

    // Theme Toggle Functionality Removed
  </script>
</body>
</html> 
